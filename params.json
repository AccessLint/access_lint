{"name":"access_lint","tagline":"Check for web accessibility errors via the command line or Ruby.","body":"# access_lint \r\n[![Build Status](https://travis-ci.org/ckundo/access_lint.png)](https://travis-ci.org/ckundo/access_lint) [![Gem Version](https://badge.fury.io/rb/access_lint.png)](http://badge.fury.io/rb/access_lint) [![Code Climate](https://codeclimate.com/repos/52c4c7ca6956804bb2000905/badges/5a971515dcfd43cf57e1/gpa.png)](https://codeclimate.com/repos/52c4c7ca6956804bb2000905/feed) [![Coverage Status](https://coveralls.io/repos/ckundo/access_lint/badge.png?branch=master)](https://coveralls.io/r/ckundo/access_lint?branch=master)\r\n\r\nRun web accessibility audits on urls or files, from the command line or within Ruby.\r\n\r\n\r\n\r\n\r\n## About\r\n\r\nAccessLint uses the [Accessibility Developer Tools](https://github.com/GoogleChrome/accessibility-developer-tools) javascript library to make assertions on the DOM via PhantomJS. The rules that are applied are [listed below](#rules).\r\n\r\n## Installation\r\n\r\nFirst, install PhantomJS ([full guide](http://phantomjs.org/)). On OS X:\r\n    \r\n    $ brew install phantomjs\r\n\r\nThen install the rubygem:\r\n\r\n    $ gem install access_lint\r\n\r\n## Usage\r\n\r\n### Command Line\r\n\r\nFrom the command line, specify a url or filename to be audited:\r\n\r\n    $ access_lint audit http://twitter.com # url or a path to a file\r\n    # results ...\r\n\r\n### Ruby\r\n\r\nRun the audit from a Ruby application like so\r\n    \r\n    $ irb\r\n    > require 'access_lint'\r\n    => true\r\n    > AccessLint::Audit.new('http://twitter.com').run\r\n    => results ...\r\n\r\n### Results Object\r\n\r\n    {\r\n        \"PASS\": [                                                           # Status group\r\n            { \r\n                \"element_names\": [\"<p class=\\\"foo\\\">relevant element</p>\"], # applicable DOM elements\r\n                \"severity\": \"WARNING\",                                      # 'WARNING' or 'SEVERE'\r\n                \"status\": \"PASS\",                                           # 'PASS', 'FAIL', or 'NA'\r\n                \"title\": \"Some description\"                                 # rule description\r\n            }, \r\n            { ... }\r\n        ],\r\n        \"NA\": [ { ... } ],\r\n        \"FAIL\": [ { ... }]\r\n    ]\r\n\r\n## Rules\r\n\r\nFor full descriptions of the audit rules, visit the [Accessibility Developer Tools project wiki](https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules)\r\n\r\n* Audio elements should have controls\r\n* ARIA state and property values must be valid\r\n* Elements with ARIA roles must use a valid, non-abstract ARIA role\r\n* Controls and media elements should have labels\r\n* These elements are focusable but either invisible or obscured by another element\r\n* Images should have an alt attribute\r\n* The purpose of each link should be clear from the link text\r\n* Text elements should have a reasonable contrast ratio\r\n* role=main should only appear on significant elements\r\n* Meaningful images should not be used in element backgrounds\r\n* aria-labelledby attributes should refer to an element which exists in the DOM\r\n* The web page should have a title that describes topic or purpose\r\n* Elements with ARIA roles must have all required attributes for that role\r\n* Video elements should use <track> elements to provide captions","google":"UA-45991240-2","note":"Don't delete this file! It's used internally to help with page regeneration."}