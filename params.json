{"name":"AccessLint","tagline":"Check for accessibility errors via the command line.","body":"## What is AccessLint?\r\n\r\nAccessLint visits a web page and outputs an accessibility audit result to the command line. It does this using PhantomJS and the [Accessibility Developer Tools](https://github.com/GoogleChrome/accessibility-developer-tools) library.\r\n\r\nRun AccessLint as part of your QA workflow, or include it in as part of your automated test suite to guard against accessibility errors.\r\n\r\n## Installation\r\n\r\n    $ brew install phantomjs\r\n\r\n    $ gem install access_lint\r\n\r\n## Command Line Usage\r\n\r\nRunning the `audit` command will return an array of stringified JSON objects to stdout:\r\n\r\n    $ access_lint audit TARGET  # TARGET can be a url or a path to a file\r\n\r\nThe JSON structure looks like:\r\n\r\n    [\r\n        { \r\n        \"element_names\": [\"<p class=\\\"foo\\\">relevant element</p>\"], # array of string values for applicable DOM nodes\r\n        \"elements\": [DOM node],                                     # array of failing nodes as DOM objects.\r\n        \"severity\": \"WARNING\",                                      # string for the severity of the failure.\r\n        \"status\": \"PASS\",                                           # 'PASS', 'FAIL', or 'NA'\r\n        \"title\": \"Some description\"                                 # string description of the failure.\r\n        }\r\n    ]\r\n\r\n### Example\r\n\r\n    $ access_lint audit http://ckundo.com\r\n    \r\n    [{\"element_names\": [\"<span class=\\\"blogger-gear\\\"></span>\"], \"elements\": [DOM node], \"severity\"=>\"Warning\", \"status\"=>\"FAIL\", \"title\"=>\"Meaningful images should not be used in element backgrounds\"}, ...]\r\n\r\n## Audit rules\r\n\r\n* Audio elements should have controls\r\n* ARIA state and property values must be valid\r\n* Elements with ARIA roles must use a valid, non-abstract ARIA role\r\n* Controls and media elements should have labels\r\n* These elements are focusable but either invisible or obscured by another element\r\n* Images should have an alt attribute\r\n* The purpose of each link should be clear from the link text\r\n* Text elements should have a reasonable contrast ratio\r\n* role=main should only appear on significant elements\r\n* Meaningful images should not be used in element backgrounds\r\n* aria-labelledby attributes should refer to an element which exists in the DOM\r\n* The web page should have a title that describes topic or purpose\r\n* Elements with ARIA roles must have all required attributes for that role\r\n* Video elements should use <track> elements to provide captions","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}